package com.problems.hashmap;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*

Leet code Problem Number :- 49
Leet code Problem Name :- Group Anagram

Given an array of strings strs, group the anagrams together. You can return the answer in any order.

Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:
There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.
 */


public class Group_Anagrams 
{
	public static List<List<String>> groupAnagram(String strs[])
	{
		if(strs==null || strs.length==0)
		{
			return new ArrayList<>();
		}
		
		Map<String,List<String>> map=new HashMap<>();
		
		for(String str:strs)
		{
			int count[]=new int[26];
			
			for(char c:str.toCharArray())
			{
				count[c-'a']++;
			}
			
			StringBuilder sb=new StringBuilder();
			
			for(int i:count)
			{
				sb.append("#");
				sb.append(i);
			}
			
			String key=sb.toString();
			
			map.computeIfAbsent(key, k->new ArrayList<>()).add(str);
		}
		return new ArrayList<>(map.values());
	}
	
	public static void main(String args[])
	{
		String[] str= {"eat","tea","tan","ate","nat","bat"};
		
		List<List<String>> result=groupAnagram(str);
		
		System.out.println(result);
	}

}
