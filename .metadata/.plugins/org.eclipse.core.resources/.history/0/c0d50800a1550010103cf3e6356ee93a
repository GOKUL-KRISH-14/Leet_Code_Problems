package com.problems.binarytree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Zigzag_Order_Traversal 
{
	private static List<List<Integer>> zigzag_Order(TreeNode root)
	{
		List<List<Integer>> result=new ArrayList<>();
		
		if(root==null)
		{
			return result;
		}
		
		Queue<TreeNode> queue=new LinkedList<>();
		queue.offer(root);
		boolean leftToRight=true;
		
		while(!queue.isEmpty())
		{
			int size=queue.size();
			LinkedList<Integer> list=new LinkedList<>();
			
			for(int i=0;i<size;i++)
			{
				TreeNode current=queue.poll();
				
				if(leftToRight)
				{
					list.addLast(current.val);
				}
				else
				{
					list.addFirst(current.val);
				}
				
				if(current.left!=null)
				{
					queue.offer(current.left);
				}
				if(current.right!=null)
				{
					queue.offer(current.right);
				}
			}
			result.add(list);
			leftToRight=!leftToRight;	
		}
		return result;
	}
	
	public static void main(String[] args) 
	{
        /*
              1
             / \
            2   3
           / \   \
          4   5   6
        */
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.right = new TreeNode(6);

        List<List<Integer>> result = zigzag_Order(root);

        System.out.println("Zigzag Level Order Traversal:");
        for (List<Integer> level : result) {
            System.out.println(level);
        }
    }

}
