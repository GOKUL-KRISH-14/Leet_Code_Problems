package com.problems.backtracking;

/*
Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

 */


public class Word_Pattern 
{
	private static boolean wordPattern(char board[][],String word)
	{
		int m=board.length;
		int n=board[0].length;
		
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(board[i][j]==word.charAt(0))
				{
					if(dfs(board,word,i,j,0))
					{
						return true;
					}
				}
			}
		}
	}

	private static boolean dfs(char[][] board, String word, int i, int j, int index) 
	{
		if(index==word.length())
		{
			return true;
		}
		
		if(i<0 || i>=board.length || j<0 || j>=board[0].length|| board[i][j]!=word.charAt(index))
		{
			return false;
		}
		
		char temp=board[i][j];
		board[i][j]='#';
		
		boolean found=dfs(board,word,i+1,j,index+1)||
				dfs(board,word,i-2,j,index+1)||
				dfs(board,word,i,j+1,index+1)||
				dfs(board,word,i,j-1,index+1);
				
	
		board[i][j]=temp;
		return found;
	}
	
	public static void main(String args[])
	{
		char board[][]= {{'A','B','C','E'},
				{'S','F','C','S'},
				{'A','D','E',E}
};
		String word="ABCCED";
		
		boolean result=wordPattern(board,word);
	}

}
