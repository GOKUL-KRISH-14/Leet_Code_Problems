package com.problems.backtracking;

import java.util.ArrayList;
import java.util.List;

/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations 
that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below.
Note that 1 does not map to any letters.

Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

 */


public class Letter_Combinations_In_Phone_Number 
{
public static List<String> letterCombinations(String digits)
{
	List<String> result=new ArrayList<>();
    
	// Edge case: if input is empty, return empty list
	if(digits==null || digits.length()==0)
	{
		return result;
	}
	
	 // Mapping digits 0-9 to corresponding letters (index = digit)
    // '0' and '1' do not map to any letters
	String mappings[]= {"","","abc","def","ghi","jkl","mno","pqrs","tuv","xyz"};
	
	backTrack(result,digits,mappings,0,new StringBuilder());
	
	return result;
}

private static void backTrack(List<String> result, String digits, String[] mappings, int index,
		StringBuilder path) 
{
	if(index==digits.length())
	{
		result.add(path.toString());
		return;
	}
	
	String possible_Characters=mappings[digits.charAt(index)-'0'];
	
	for(char ch:possible_Characters.toCharArray())
	{
		path.append(ch);
		backTrack(result,digits,mappings,index+1,path);
		path.deleteCharAt(path.length()-1);
}
}
}
