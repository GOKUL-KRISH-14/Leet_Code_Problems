package com.problems.hashmap;

import java.util.Arrays;
import java.util.HashMap;

/*

1. Leet code Problem Number :- 1
2. Leet code Problem Name :- Two sum Problem

Given an array of integers nums and an integer target, 
return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, 
and you may not use the same element twice.

You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

 */

public class Two_Sum_Problem 
{
	public static int[] twoSumProblem(int nums[],int target)
	{
		HashMap<Integer,Integer> map=new HashMap<>();
		
		int n=nums.length;
		
		for(int i=0;i<n;i++)
		{
			int complement=target-nums[i];
			
			if(map.containsKey(complement))
			{
				return new int[] {map.get(complement),i};
			}
			map.put(nums[i], i);
		}
		return new int[] {-1,-1};
	}
	
	public static void main(String args[])
	{
		// Input array and target value
		int nums[] = {2, 7, 11, 15};
		int target = 20;

		int[] result = twoSumProblem(nums, target);

		// Print the result
		System.out.println("Answer is: " + Arrays.toString(result));
	}
}
