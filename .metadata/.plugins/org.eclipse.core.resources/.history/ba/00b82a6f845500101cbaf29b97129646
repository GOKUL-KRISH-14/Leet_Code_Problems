package com.problems.binarytree;

import java.util.LinkedList;
import java.util.Queue;

// Class representing each node of the tree
class TreeNode
{
	int val;
	TreeNode left;
	TreeNode right;

	public TreeNode(int val)
	{
		this.val=val;
	}
}
public class BinaryTreeTraversals
{
 // Inorder Traversal (Left, Node, Right)
 private static void inOrder(TreeNode root)
 {
     if(root==null)
     {
         return;
     }
     
     inOrder(root.left);
     System.out.print(root.val+"->");
     inOrder(root.right);
 }
 
 private static void preOrder(TreeNode root)
 {
	 if(root==null)
	 {
		 return;
	 }
	 
	 System.out.print(root.val+"->");
	 preOrder(root.left);
	 preOrder(root.right);
 }
 
 private static void postOrder(TreeNode root)
 {
	 if(root==null)
	 {
		 return;
	 }
	 
	 postOrder(root.left);
	 postOrder(root.right);
	 System.out.print(root.val+"->");
 }
 
 private static void levelOrder(TreeNode root)
 {
	 if(root==null)
	 {
		 return;
	 }
	 
	 Queue<TreeNode> queue=new LinkedList<>();
	 queue.offer(root);
	 
	 while(!queue.isEmpty())
	 {
		 TreeNode current=queue.poll();
		 
		 System.out.print(current.val+"->");
		 
		 if(current.left!=null)
		 {
			 queue.offer(current.left);
		 }
		 
		 if(current.right!=null)
		 {
			 queue.offer(current.right);
		 }
	 }
	 
 }
 public static void main(String args[])
 {
     TreeNode root=new TreeNode(1);
     root.left=new TreeNode(2);
     root.right=new TreeNode(3);
     root.left.left=new TreeNode(4);
     root.left.right=new TreeNode(5);
     
     System.out.println("\nIN ORDER TRAVERSAL");
     inOrder(root);
     System.out.print("\n");
     
     System.out.println("\nPRE ORDER TRAVERSAL");
     preOrder(root);
     System.out.print("\n");
     
     System.out.println("\nPOST TRAVERSAL");
     postOrder(root);
     System.out.print("\n");
     
     System.out.println("\nLEVEL ORDER TRAVERSAL");
     levelOrder(root);
     System.out.print("\n");
     
     
     
 }
}



