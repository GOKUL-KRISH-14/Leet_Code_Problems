package com.problems.intervals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
Given an array of intervals where intervals[i] = [starti, endi],
merge all overlapping intervals, and return an array of the non-overlapping intervals 
that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]

Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
 */

public class Merge_Intervals 
{
	public static int[][] mergeIntervals(int intervals[][])
	{
		// If intervals is null or only one interval, return as is
		if(intervals==null || intervals.length<=1)
		{
			return intervals;
		}
		
		// List to store merged intervals
		List<int[]> merged=new ArrayList<>();
		
		// Sort intervals by start time (first element of each sub-array
		Arrays.sort(intervals,(a,b)->Integer.compare(a[0], b[0]));
		
		// Initialize with first interval
		int[] current=intervals[0];
		merged.add(current);
		
		// Process remaining intervals
		for(int i=1;i<intervals.length;i++)
		{
			// Current merged interval end
			int currentEnd=current[1];
			
			// Next interval start
			int nextStart=intervals[i][0];
			
			// Next interval end
			int nextEnd=intervals[i][1];
			
			if(nextStart<=currentEnd)
			{
				// Overlapping: extend current interval
				current[1]=Math.max(currentEnd, nextEnd);
			}
			else
			{
				// No overlap: move to next interval
				current=intervals[i];
				merged.add(current);
			}
		}
		
		return merged.toArray(new int[merged.size()][]);
	}
}
