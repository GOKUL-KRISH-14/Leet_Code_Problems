package com.problems.array;

/*
 1.Leet code Problem Number :- 134

2.Leet code Problem Name :- Gas Station
 
Given two integer arrays gas and cost, return the starting gas station's index 
if you can travel around the circuit once in the clockwise direction, otherwise return -1. 
If there exists a solution, it is guaranteed to be unique.

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3

Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Complexties:-
1. Time Complexity  :- O(n)
2. Space Complexity :- O(1)


 */

public class Gas_Station 
{
public static int gasStation(int gas[],int cost[])
{
	// Candidate start station
	int start = 0;
	
    // Current fuel in tank
	int tank = 0; 
	
	// Total gas available
    int totalGas = 0;    
    
    // Total cost needed
    int totalCost = 0;    

	
	for(int i=0;i<gas.length;i++)
	{
		totalGas+=gas[i];
		totalCost+=cost[i];
		
		tank+=gas[i]-cost[i];
		
		// If tank is negative, can't reach station i+1
		if(tank<0)
		{
		// Try next station as start      
		start=i+1;
		
		// Reset tank
		tank=0;
		}		
	}
	
	// If total gas is less than total cost, trip is not possible
	return totalGas>=totalCost?start:-1;
}
	
}
