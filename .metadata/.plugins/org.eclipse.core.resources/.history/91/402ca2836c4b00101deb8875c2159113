package com.problems.backtracking;

import java.util.ArrayList;
import java.util.List;

/*

Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].
You may return the answer in any order.

Example 1:
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]

Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.



 */
public class Combinations 
{
	public static List<List<Integer>> combine(int n,int k)
	{
	List<List<Integer>> result=new ArrayList<>();
	backTrack(n,k,1,new ArrayList<>(),result);
	return result;
	}

	private static void backTrack(int n, int k, int start, List<Integer> path, 
			List<List<Integer>> result) 
	{
		if(path.size()==k)
		{
		    result.add(new ArrayList<>(path));
		    return;
		}
		
		for(int i=start;i<=n;i++)
		{
			path.add(i);
			backTrack(n,k,i+1,path,result);
			path.remove(path.size()-1);
		}
		
	}

}
